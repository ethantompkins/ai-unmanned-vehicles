'''
Danny Saad
Assignment 3
CPSC 4820
'''

import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
import copy
import pywt

# set 1, 2, 'all'
question = 'all'


def display_image(img, title=None, gray:bool = True, colorbar:bool = False):
    if gray:
        im_show = plt.imshow(img, cmap='gray') 
    else:
        im_show = plt.imshow(img)
    plt.title(title)
    plt.axis('off')
    if colorbar:
        plt.colorbar(im_show, orientation="vertical")
    plt.show()


if question == 1 or question == 'all':

    # ============================================================================
    # START 1.1 ------------------------------------------------------------------
    # ============================================================================
    img = cv.imread("cone.jpg", cv.IMREAD_GRAYSCALE)
    cone_height = img.shape[0]
    cone_width = img.shape[1]
    display_image(img, "img")
    # ============================================================================
    # END 1.1 --------------------------------------------------------------------
    # ============================================================================



    # ============================================================================
    # START 1.2 ------------------------------------------------------------------
    # ============================================================================
    template = cv.imread("template-noise.jpg", cv.IMREAD_GRAYSCALE)
    template_height = template.shape[0]
    template_width = template.shape[1]
    display_image(template, 'template')
    # ============================================================================
    # END 1.2 --------------------------------------------------------------------
    # ============================================================================



    # ============================================================================
    # START 1.3 ------------------------------------------------------------------
    # ============================================================================
    template = cv.medianBlur(template, 5)
    display_image(template, "Denoised template")
    # ============================================================================
    # END 1.3 --------------------------------------------------------------------
    # ============================================================================



    # ============================================================================
    # START 1.4 ------------------------------------------------------------------
    # ============================================================================
    ccn_image = copy.deepcopy(img)

    match = cv.matchTemplate(img, template, cv.TM_CCORR_NORMED)
    min_val, max_val, min_loc, max_loc = cv.minMaxLoc(match)

    top_left = max_loc
    bottom_right = (top_left[0] + template_width, top_left[1] + template_height)

    cv.rectangle(ccn_image,top_left, bottom_right, 255, 2)

    display_image(ccn_image, "CC Norm")
    # ============================================================================
    # END 1.4 --------------------------------------------------------------------
    # ============================================================================



    # ============================================================================
    # START 1.5 ------------------------------------------------------------------
    # ============================================================================
    cc_image = copy.deepcopy(img)

    match = cv.matchTemplate(img, template, cv.TM_CCORR)
    min_val, max_val, min_loc, max_loc = cv.minMaxLoc(match)

    top_left = max_loc
    bottom_right = (top_left[0] + template_width, top_left[1] + template_height)

    cv.rectangle(cc_image,top_left, bottom_right, 255, 2)

    display_image(cc_image, "CC Standard")
    # ============================================================================
    # END 1.5 --------------------------------------------------------------------
    # ============================================================================



    # ============================================================================
    # START 1.6 ------------------------------------------------------------------
    # ============================================================================
    ssqd_image = copy.deepcopy(img)

    match = cv.matchTemplate(img, template, cv.TM_SQDIFF)
    min_val, max_val, min_loc, max_loc = cv.minMaxLoc(match)

    top_left = min_loc
    bottom_right = (top_left[0] + template_width, top_left[1] + template_height)

    cv.rectangle(ssqd_image,top_left, bottom_right, 255, 2)

    display_image(ssqd_image, "Sum Squarded Difference")
    # ============================================================================
    # END 1.6 --------------------------------------------------------------------
    # ============================================================================


if question == 2 or question == 'all':
    # ============================================================================
    # START 2.1 ------------------------------------------------------------------
    # ============================================================================
    wavelet = pywt.Wavelet('bior1.3')
    # ============================================================================
    # END 2.1 --------------------------------------------------------------------
    # ============================================================================
    
    
    
    # ============================================================================
    # START 2.2 ------------------------------------------------------------------
    # ============================================================================
    phi_d, psi_d, _, _, _ = wavelet.wavefun(level=5)

    # low pass
    plt.plot(phi_d)
    plt.title("Scaling Function (Phi) - Wavelet 1")
    plt.show()
    
    # edge detection
    plt.plot(psi_d)
    plt.title("Wavlet Function (Psi) - Wavelet 1")
    plt.show()
    # ============================================================================
    # END 2.2 --------------------------------------------------------------------
    # ============================================================================
    
    
    
    # ============================================================================
    # START 2.4 ------------------------------------------------------------------
    # ============================================================================
    ss = cv.imread("skyscrapers.jpg", cv.IMREAD_GRAYSCALE)
    ss_height = ss.shape[0]
    ss_width = ss.shape[1]
    
    display_image(ss, "SS")
    # ============================================================================
    # END 2.4 --------------------------------------------------------------------
    # ============================================================================
    
    
    
    # ============================================================================
    # START 2.5 ------------------------------------------------------------------
    # ============================================================================
    approx1, (horiz1, vert1, diag1) = pywt.dwt2(ss, wavelet, mode='zpd')
    # ============================================================================
    # END 2.5 --------------------------------------------------------------------
    # ============================================================================

    
    
    # ============================================================================
    # START 2.6 ------------------------------------------------------------------
    # ============================================================================
    display_image(approx1, 'Approximate with Biorthogonal')
    display_image(horiz1, 'Horizontal Detail with Biorthogonal')
    display_image(vert1, 'Vertical Detail with Biorthogonal')
    display_image(diag1, 'Diagonal Detail with Biorthogonal')
    # ============================================================================
    # END 2.6 --------------------------------------------------------------------
    # ============================================================================
    
    
    
    # ============================================================================
    # START 2.7 ------------------------------------------------------------------
    # ============================================================================
    wavelet2 = pywt.Wavelet('db20')
    # ============================================================================
    # END 2.7 --------------------------------------------------------------------
    # ============================================================================
    
   
   
    # ============================================================================
    # START 2.8 ------------------------------------------------------------------
    # ============================================================================
    phi_d, psi_d, _ = wavelet2.wavefun(level=5)

    # low pass
    plt.plot(phi_d)
    plt.title("Scaling Function (Phi) - Wavelet 2")
    plt.show()
    
    # edge detection
    plt.plot(psi_d)
    plt.title("Wavlet Function (Psi) - Wavelet 2")
    plt.show()
    # ============================================================================
    # END 2.8 --------------------------------------------------------------------
    # ============================================================================ 
    
    
    
    # ============================================================================
    # START 2.9 ------------------------------------------------------------------
    # ============================================================================
    approx2, (horiz2, vert2, diag2) = pywt.dwt2(ss, wavelet2, mode='zpd')
    # ============================================================================
    # END 2.9 --------------------------------------------------------------------
    # ============================================================================
    
    
    
    # ============================================================================
    # START 2.10 -----------------------------------------------------------------
    # ============================================================================
    display_image(approx2, 'Approximate with Daubechies')
    display_image(horiz2, 'Horizontal Detail with Daubechies')
    display_image(vert2, 'Vertical Detail with Daubechies')
    display_image(diag2, 'Diagonal Detail with Daubechies')
    # ============================================================================
    # END 2.10 --------------------------------------------------------------------
    # ============================================================================

    
    
    # ============================================================================
    # START 2.12 -----------------------------------------------------------------
    # ============================================================================
    ss_poly = copy.deepcopy(ss)
    polygon_points = np.array([[1302, 140], [1444, 140],
                               [1554, 230], [1554, 372],
                               [1444, 462], [1302, 462], 
                               [1192, 372], [1192, 230]], np.int32)
    polygon_points = polygon_points.reshape((-1, 1, 2))

    color = (0,0,0)
    thickness = 1
    
    ss_poly = cv.polylines(ss, [polygon_points], isClosed=True, color=color, thickness=thickness)

    display_image(ss_poly, 'ss_poly')
    # ============================================================================
    # END 2.12 -------------------------------------------------------------------
    # ============================================================================
    
    
    
    # ============================================================================
    # START 2.13 -----------------------------------------------------------------
    # ============================================================================
    approx3, (horiz3, vert3, diag3) = pywt.dwt2(ss_poly, wavelet, mode='zpd')
    display_image(approx3, 'SS_Poly Approximate with Biorthogonal')
    display_image(horiz3, 'SS_Poly Horizontal Detail with Biorthogonal')
    display_image(vert3, 'SS_Poly Vertical Detail with Biorthogonal')
    display_image(diag3, 'SS_Poly Diagonal Detail with Biorthogonal')
    # ============================================================================
    # END 2.13 -------------------------------------------------------------------
    # ============================================================================